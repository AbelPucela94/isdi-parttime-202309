import fs from 'fs'
import path from 'path'
import { User, File } from '../data/models.js'
import { validate, errors } from 'com'
const { SystemError, NotFoundError } = errors

function uploadFile(userId, file, filename, mimeType) {
    validate.id(userId, 'ID User')
    validate.text(filename, 'File name')
    validate.text(mimeType, 'File type')
    
    return User.findById(userId).lean()
        .catch(error => { throw new SystemError(error.message)})
        .then(user => {
            if (!user) {
                throw new NotFoundError('User not found')
            }
            
            return File.create({ name: filename, owner: user.id, type: mimeType, parent: '', permissions: 3 })
                .catch(error => { throw new SystemError(error.message)})
                .then(file => {
                    const newPath = `./uploads/${file._id}`
                    const saveFile = fs.renameSync(file.path, newPath)
                    
                    return saveFile
                })
        })
}

o

import fs from 'fs/promises';
import path from 'path';
import { User, File } from '../data/models.js';
import { validate, errors } from 'com';

const { SystemError, NotFoundError } = errors;

async function uploadFile(userId, filename, mimeType) {
    validate.id(userId, 'ID User');
    validate.text(filename, 'File name');
    validate.text(mimeType, 'File type');

    try {
        const user = await User.findById(userId).lean();
        if (!user) {
            throw new NotFoundError('User not found');
        }

        const file = await File.create({ name: filename, owner: user.id, type: mimeType, parent: '', permissions: 3 });
        
        const newPath = path.join(__dirname, `./uploads/${file._id}`);
        await fs.rename(file.path, newPath);

        return newPath;
    } catch (error) {
        throw new SystemError(error.message);
    }
}

export default uploadFile;
